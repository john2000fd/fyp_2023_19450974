

graph Typerules{

    abstract start node S{}

    abstract node I0{}
    abstract node I1{}
    abstract final node I2{}//return type is integer

    abstract node F0{}
    abstract node F1{}
    abstract final node F2{}//return type is float

    abstract node D0{}
    abstract node D1{}
    abstract final node D2{}//return type is Double

    edge { S -> I0, F0, D0 }

    edge { I0 -> I1,F1,D1 }
    edge { D0 -> I1,F1,D1 }
    edge { F0 -> I1,F1,D1 }

    edge { I1 -> I2,F2,D2 }
    edge { D1 -> I2,F2,D2 }
    edge { F1 -> I2,F2,D2 }

    goal{

        let rule1 = !(I0->F1->I2) && !(I0->D1->I2) && !(I0->D1->F2) && !(I0->I1->D2) && !(I0->F1->D2) && !(I0->D1->I2);
        let rule2 = !(D0->F1->I2) && !(D0->D1->F2) && !(D0->I1->F2) && !()

        enumerate for 3 condition (rule1 && rule2 && rule3)
    }

}